import java.nio.file.Files

/*
 * Project: Train-Motion
 * Copyright (C) 2021 alf.labs gmail com,
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: "java"
apply plugin: "idea"

group   "org.alflabs.trainmotion"
version "0.5-SNAPSHOT"

project.ext {
    javaManifestClass = "com.alflabs.trainmotion.Main"
    cmdArgs = ""
}

repositories {
    mavenCentral()
}

compileJava {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
}

configurations {
    // Important: the fatJar rule below only packages stuff from the "compileClasspath"
    // configuration. It does not package stuff from "implementation" or "api" ones.
    // Note: "compileClasspath" works for fatJar, however it breaks with unit tests
    // so going back to the old "compile" instead. Since it's deprecated, we recreate
    // something that works for both compile + runtime + fatJar.
    runtimeCompile {
        canBeResolved = true
        canBeConsumed = true
    }
    compileClasspath.extendsFrom(runtimeCompile)
    runtimeClasspath.extendsFrom(runtimeCompile)
    testCompileClasspath.extendsFrom(runtimeCompile)
    testRuntimeClasspath.extendsFrom(runtimeCompile)
}

dependencies {
    runtimeCompile project(":LibUtilsJava")

    runtimeCompile "commons-cli:commons-cli:1.4"
    runtimeCompile "org.bytedeco:javacv-platform:1.5.3"
    runtimeCompile "org.bytedeco:javacpp-platform:1.5.3"
    runtimeCompile "uk.co.caprica:vlcj:4.7.1"
    runtimeCompile "com.fasterxml.jackson.core:jackson-databind:2.10.2"
    runtimeCompile "com.squareup.okhttp3:okhttp:3.10.0"

    runtimeCompile          "javax.inject:javax.inject:1"
    runtimeCompile          "com.google.dagger:dagger:2.28"
    annotationProcessor     "com.google.dagger:dagger-compiler:2.28"
    testAnnotationProcessor "com.google.dagger:dagger-compiler:2.28"

    runtimeCompile      "com.google.auto.factory:auto-factory:1.0.1"
    annotationProcessor "com.google.auto.factory:auto-factory:1.0.1"

    testImplementation "junit:junit:4.12"
    testImplementation "com.google.truth:truth:1.0.1"
    testImplementation "org.mockito:mockito-core:3.3.3"
    testImplementation "com.google.guava:guava:29.0-jre"
}

// Change location of dagger generated files and map it in IJ.
def generatedDaggerDir = new File(project.projectDir.absolutePath, "src/main/dagger")
compileJava {
    doFirst {
        generatedDaggerDir.mkdirs()
    }
    // Javac javadoc: "-s dir: Specify the directory where to place generated source files"
    options.compilerArgs += [ "-s", generatedDaggerDir ]
}

clean {
    doFirst {
        delete generatedDaggerDir
    }
}

sourceSets {
    main {
        // Append generatedDaggerDir to the srcDir. This actually breaks javac per issue
        // JDK-8067747 as it results in sources built twice (annotation processor then javac).
        // java.srcDir generatedDaggerDir <-- don't do that.
    }
}

idea {
    module {
        // Tell IJ about our new generated source dir.
        // Tip: In Project pane > src/main/dagger > Mark Directory > Mark Generated Source Root.
        generatedSourceDirs += generatedDaggerDir
    }
}

// Rules to build a self-contained deployment fat jar with a specified entry point.
jar {
    manifest {
        attributes(
                "Main-Class": project.ext.javaManifestClass,
        )
    }
}

// Build a "fat" jar with all the dependencies that are marked using "compile".
// C.f. http://stackoverflow.com/questions/4871656
// Update: this ignore these marked with the new "implementation".
task fatJar(type: Jar) {
    manifest.from jar.manifest
    classifier = "all"
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

// Pass run arguments using gradlew ... -Pargs='multiple args'
if (project.hasProperty("args")) {
    project.ext.cmdArgs = project.getProperty("args")
} else {
    project.ext.cmdArgs = "--config src/main/resources/config.ini --help"
}

// Create a single fat JAR embedding all dependencies. JAR is about ~760 MB and takes 4 min to build.
// Useful to share a single JAR with all embedded dependencies, and to work around the classpath
// size limitation on Windows.
task runFat(type: Exec) {
    dependsOn fatJar
    group = "Execution"
    commandLine "java",
            "-jar", fatJar.archiveFile.get()
    args project.ext.cmdArgs.split()
}

// Attempts to run by specifying the full classpath.
// This fails on Windows (classpath too long, use runFat instead).
task run(type: Exec) {
    dependsOn jar
    group = "Execution"
    commandLine "java",
            // "-verbose:class",  // display each class opened (to default jar load issues).
            "-cp", _computeClasspath(jar.archiveFile),
            project.ext.javaManifestClass
    args project.ext.cmdArgs.split()
}

def _computeClasspath(jarFile) {
    def files = configurations.compileClasspath.collect { it.path }
    if (jarFile) { files.add(0, jarFile.get().getAsFile().path) }
    return files.unique().join(File.pathSeparator)
}

// For Linux were we can run a command line with a long classpath.
task _printRunCmdLine {
    dependsOn jar
    doFirst {
        println "-cp " + _computeClasspath(jar.archiveFile) + " " + project.ext.javaManifestClass
    }
}

// For Windows were we cannot run a command line with a long classpath.
task _printRunFatJarCmdLine {
    dependsOn jar
    doFirst {
        println "-jar " + fatJar.archiveFile.get()
    }
}

artifacts {
    archives fatJar
}

